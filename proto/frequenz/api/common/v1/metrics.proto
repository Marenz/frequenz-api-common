// Metrics & bounds definitions.
//
// Copyright:
// Copyright 2023 Frequenz Energy-as-a-Service GmbH
//
// License:
// MIT

syntax = "proto3";

package frequenz.api.common.v1.metrics;

import "google/protobuf/timestamp.proto";

// A set of lower and upper bounds for any metric.
// The units of the bounds are always the same as the related metric.
message Bounds {
  // The lower bound.
  // If absent, there is no lower bound.
  optional float lower = 1;

  // The upper bound.
  // If absent, there is no upper bound.
  optional float upper = 2;
}

// A metric's value, with optional limits.
message Metric {
  // The UTC timestamp of when the data was either measured or derived.
  google.protobuf.Timestamp sampled_at = 1;

  // The value of the metric, which could be either measured or derived.
  float value = 2;

  // List of bounds that apply to the metric sample.
  //
  // These bounds adapt in real-time to reflect the operating conditions at the
  // time of sampling.
  //
  // ### Multiple Bounds
  //
  // In the case of certain components like batteries, multiple bounds might
  // exist. These multiple bounds collectively extend the range of allowable
  // values, effectively forming a union of all given bounds. In such cases,
  // the value of the metric must be within at least one of the bounds.
  // In accordance with the passive sign convention, bounds that limit discharge
  // would have negative numbers, while those limiting charge, such as for the
  // State of Power (SoP) metric, would be positive. Hence bounds can have
  // positive and negative values depending on the metric they represent.
  //
  // Example:
  // The diagram below illustrates the relationship between the bounds.
  // ```
  //    bound[0].lower                               bound[1].upper
  // <-------|============|------------------|============|--------->
  //                bound[0].upper     bound[1].lower
  // ```
  // ---- values here are disallowed and will be rejected
  // ==== values here are allowed and will be accepted
  repeated Bounds bounds = 3;
}

// Metrics depicted as a collection of statistical summaries.
//
// Useful when a component has to report multiple values for the same metric.
// E.g., a battery is a collection of several blocks, and each block has a
// temperature sensor. The battery can report a summary of the values provided
// by all these sensors, like, min, max, avg, etc., and if possible, the entire
// array of temperature values.
message MetricAggregation {
  // The UTC timestamp indicating the period over which the data was aggregated
  // or derived.
  google.protobuf.Timestamp sampled_at = 1;

  // The derived average value of the metric.
  float avg_value = 2;

  // The minimum measured value of the metric.
  optional float min_value = 3;

  // The maximum measured value of the metric.
  optional float max_value = 4;

  // Optional array of all the raw individual values.
  repeated float raw_values = 5;

  // List of bounds that apply to the metric sample.
  //
  // These bounds adapt in real-time to reflect the operating conditions at the
  // time of aggregation or derivation.
  //
  // ### Multiple Bounds
  //
  // In the case of certain components like batteries, multiple bounds might
  // exist. These multiple bounds collectively extend the range of allowable
  // values, effectively forming a union of all given bounds. In such cases,
  // the value of the metric must be within at least one of the bounds.
  // In accordance with the passive sign convention, bounds that limit discharge
  // would have negative numbers, while those limiting charge, such as for the
  // State of Power (SoP) metric, would be positive. Hence bounds can have
  // positive and negative values depending on the metric they represent.
  //
  // Example:
  // The diagram below illustrates the relationship between the bounds.
  // ```
  //      bound[0].lower                         bound[1].upper
  // <-------|============|------------------|============|--------->
  //                bound[0].upper      bound[1].lower
  // ```
  // ---- values here are disallowed and will be rejected
  // ==== values here are allowed and will be accepted
  repeated Bounds bounds = 6;
}
